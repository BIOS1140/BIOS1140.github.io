[["ch02.html", "Week 2 Building on your foundations: going further with R", " Week 2 Building on your foundations: going further with R In the last chapter, we got to grips with the basics of R. Hopefully after completing the basic introduction, you feel more comfortable with the key concepts of R. Dont worry if you feel like you havent understood everything - this is common and perfectly normal! Learning R is very much like learning a real language in that it takes time and practice to feel fluent. Even if you do feel comfortable in the language, there is no shame in asking for help or looking for more information to develop your understanding. As regular R users, we still look things up constantly and there are one or two basics which we still forget, even with over a decade of experience of using the R environment! With this in mind, a goal of these R tutorials is to re-emphasise and reinforce basic concepts throughout. We will introduce concepts but through the practical demonstrations of code, we will underline them again and again. In future chapters, we will be using a similar approach to reinforce the evolutionary genetic concepts you have encountered in the book. However, for this chapter we remain solely in the R environment and will instead switch our focus to more advanced features of R. Advanced does not necessarily mean more complicated - but it does mean that you need to have at least been introduced to the basic concepts. We will first level-up our approach to handling and manipulating data. For this, we will be borrowing heavily from the tidyverse - a collection of packages and principles for data science in R. We will also introduce you to more advanced plotting, comparing the two most popular apporaches for plots - base and ggplot. What to expect In this section we are going to: explore more advanced methods of handling and manipulating data learn how to plot data using ggplot2 learn how to reshape data with pivot_longer() "],["intro-to-data-manipulation-with-tidyverse.html", "2.1 Intro to data manipulation with tidyverse", " 2.1 Intro to data manipulation with tidyverse Data manipulation might seem quite a boring topic but it is actually a crucial part of data science and increasingly, bioinformatics and evolutionary biology. For the average researcher working with biological data, we would estimate that the vast majority of analysis time is spent handling the data. By handling and manipulation, we mean exploring the data, shaping it into a form we want to work with and extracting information we find important or interesting. Getting to know your data is absolutely fundamental to properly understanding it and that is why we have decided to dedicate time to it in this chapter. At this point in our tutorial, we will use a series of packages collectively known as the tidyverse; in particularly, we will focus on functions from a tidyverse package called dplyr. These packages grew from the approach of Hadley Wickham - a statistician responsible for popularising fresh approaches to R and data science. As with nearly all things in R, there are many, many ways to achieve the same goal and the guidlines we give here are by no means definitive. However, we choose to introduce these principles now because in our experience of data analysis, they have greatly improved our efficiency, the clarity of our R code and the way we work with data. 2.1.1 What is the tidyverse? Its important to emphasize that the tidyverse set of packages can do mostly the same as base R already can do. So whats the difference? While base R is a collection of different methods and functions built up over years, tidyverse is designed with a specific philosophy in mind. This leads to having a consistent approach to solving problems that many find appealing. That being said, if you find you prefer the regular R-functions over their tidyverse equivalents, go ahead and use those instead, theres nothing wrong with that. Important concept: The tidyverse packages can do more or less exactly the same as base R. The difference is that tidyverse approaches problems with a specific philosophy. Some key points of this philosophy is: The name of all functions that transform data are verbs The data argument is always the first argument of the functions, so its easy to use in a pipeline (more on this later). 2.1.2 The dplyr package dplyr is one of the packages in the tidyverse, and is focused on manipulating data in data frames. dplyr at its core consists of combining 5 different verbs for data handling: select() select columns from your data filter() filters rows based on certain criteria mutate() creates new columns (not gone through in this tutorial, but included in this list for completeness) group_by() creates groups for summarizing data summarise() summarises data based on the groups you have created We will go through the use of these functions shortly. You may notice that youve already learned how to select, filter and mutate data last week using [] and $, which is correct, and exactly what we mean when we say that base R and tidyverse can do the same things. "],["using-dplyr-to-work-with-your-data.html", "2.2 Using dplyr to work with your data", " 2.2 Using dplyr to work with your data First, we have to install and load the tidyverse.1 install.packages(&quot;tidyverse&quot;) library(tidyverse) Together with the tidyverse, you get a built in data set called starwars, containing information about the characters from the Star Wars films. We will use this data set for most of this tutorial. Since its already loaded, all you have to do to access it is run: starwars #&gt; # A tibble: 87 x 14 #&gt; name height mass hair_color skin_color eye_color birth_year sex gender #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Luke~ 172 77 blond fair blue 19 male mascu~ #&gt; 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ #&gt; 3 R2-D2 96 32 &lt;NA&gt; white, bl~ red 33 none mascu~ #&gt; 4 Dart~ 202 136 none white yellow 41.9 male mascu~ #&gt; 5 Leia~ 150 49 brown light brown 19 fema~ femin~ #&gt; 6 Owen~ 178 120 brown, gr~ light blue 52 male mascu~ #&gt; 7 Beru~ 165 75 brown light blue 47 fema~ femin~ #&gt; 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu~ #&gt; 9 Bigg~ 183 84 black light brown 24 male mascu~ #&gt; 10 Obi-~ 182 77 auburn, w~ fair blue-gray 57 male mascu~ #&gt; # ... with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, #&gt; # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; Additional info: starwars is a data frame like you learned about last week, but you might notice that its printing a bit differently (e.g. with red color for NA, condensing the output). This is because starwars is a special kind of data frame introduced in the tidyverse, called a tibble. For all practical purposes, a tibble and a data frame is the same, so throughout this course we wont care much whether our data is contained in a tibble or a regular data frame. 2.2.1 The pipe The tidyverse introduces a new operator called the pipe, which looks like this %&gt;%. Conceptually, the pipe allows you to do something with your data, and then send the result to a new function which does more work, sends it to the next function and so on until youre satisfied. You can for instance use the pipe like this: x &lt;- 1:100 x^2 %&gt;% mean() #&gt; [1] 3383.5 This is equivalent to writing: mean(x^2) #&gt; [1] 3383.5 Basically, you are putting the left hand side of the pipe into the parentheses in the function on the right hand side. This may not seem useful right now, but as we will see later, this can make code much easier to read. You can also assign the results of your pipe to an object like any ordinary calculation: x2_mean &lt;- x^2 %&gt;% mean() There will be a lot of examples of using the pipe throughout this tutorial, showing how it can make quite complex code readable. Important concept: The pipe operator %&gt;% allows you to send an object from the left side of the pipe to a function on the right side. 2.2.2 Selecting colums with select() Lets say we want to choose the name and homeworld columns from our starwars data, how can we do that? With standard R, we might do something like this. # with names starwars[, c(&#39;name&#39;, &#39;homeworld&#39;)] # with indices starwars[, c(1, 9)] With dplyr we can do the following: select(starwars, name, homeworld) #&gt; # A tibble: 87 x 2 #&gt; name homeworld #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Luke Skywalker Tatooine #&gt; 2 C-3PO Tatooine #&gt; 3 R2-D2 Naboo #&gt; 4 Darth Vader Tatooine #&gt; 5 Leia Organa Alderaan #&gt; 6 Owen Lars Tatooine #&gt; 7 Beru Whitesun lars Tatooine #&gt; 8 R5-D4 Tatooine #&gt; 9 Biggs Darklighter Tatooine #&gt; 10 Obi-Wan Kenobi Stewjon #&gt; # ... with 77 more rows The first argument here is your data, while the others are the columns you want to select. Note that you dont need to use the quotes \" here, you generally dont need those for the dplyr functions. select() becomes even more intuitive when using the pipe: starwars %&gt;% select(name, homeworld) This style of code is closer to how we would write in English: Take the starwars data, and select the name and homeworld columns. From now on we will write all our dplyr code using the pipe. If you want to omit a column, you can use - in front of its name: # choose all columns BUT name starwars %&gt;% select(-name) select also has additional ways of selecting columns, some examples of this is shown below: # choose only columns containing an underscore starwars %&gt;% select(contains(&quot;_&quot;)) # choose only columns beginning with &quot;s&quot; starwars %&gt;% select(starts_with(&quot;s&quot;)) # choose only columns ending with &quot;color&quot; starwars %&gt;% select(ends_with(&quot;color&quot;)) Exercise: Use select() to select numeric columns, i.e. all the columns that contain numbers, and save it to an object with a meaningful name. You can do this manually by looking at the columns. If you want a challenge, see if you can figure out how to automatically select numeric columns from your data. # manual method: sw_hmb &lt;- starwars %&gt;% select(height, mass, birth_year) # challenge: sw_hmb &lt;- starwars %&gt;% select(where(is.numeric)) 2.2.3 Filtering colums using filter() Last week, you learned to filter a data set based on some criterion using the square brackets []. To filter out only the humans from the starwars data set, you could write: starwars[starwars$species == &quot;Human&quot;, ] dplyrs filter() function does the same thing, but with a slightly different syntax: starwars %&gt;% filter(species == &quot;Human&quot;) This looks quite similar to using the square brackets, one notable difference being that you dont need to use starwars$ within filter(), the function already understands that we are working with starwars. Like with base R, you can use this to filter with the other logical operators as well, like &gt; and !=: # get people lower than 1m tall starwars %&gt;% filter(height &lt; 100) # get all non-humans starwars %&gt;% filter(species != &quot;Human&quot;) You can also filter using several criteria at once, simply separate the logical statements with a comma: # get all non-humans shorter than 1m starwars %&gt;% filter(height &lt; 100, species != &quot;Human&quot;) 2.2.3.1 Combining filter() and select() The real power of the pipe shows when you chain several operations together. To both filter and select from your data, simply first do the filtering and then pipe the result to select:2 starwars %&gt;% filter(height &lt; 100) %&gt;% select(name, height, birth_year) #&gt; # A tibble: 7 x 3 #&gt; name height birth_year #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 R2-D2 96 33 #&gt; 2 R5-D4 97 NA #&gt; 3 Yoda 66 896 #&gt; 4 Wicket Systri Warrick 88 8 #&gt; 5 Dud Bolt 94 NA #&gt; 6 Ratts Tyerell 79 NA #&gt; 7 R4-P17 96 NA Again, the code looks like how you would explain what youre doing: take the starwars data, filter based on height, and select the name, height and birth_year columns. Note that you can have a line break after a pipe like you can inside parentheses, your code will still continue running. Exercise: use filter() to choose all the people that has Naboo as homeworld. Select name, skin_color and eye_color and save the result to an object. sw_naboo_color &lt;- starwars %&gt;% filter(homeworld == &quot;Naboo&quot;) %&gt;% select(name, skin_color, eye_color) Important concept: - filter() is used to select specific rows. Example: filter(height &lt; 100) - select() is used to select specific columns. Example: select(name, height) 2.2.4 Grouped summaries with group_by() and summarise() Imagine that you want to calculate the mean height of the people (and droids) in the starwars data set. You could use mean() on the column to achieve this (note the use of na.rm since the height column contains NAs): mean(starwars$height, na.rm = TRUE) #&gt; [1] 174.358 But what if you want to calculate the mean height separately for e.g. the different species? One way to do this is to do a grouped summary. Your group is the species column, and your summary statistic is mean. We create groups using the group_by() function: starwars %&gt;% group_by(species) #&gt; # A tibble: 87 x 14 #&gt; # Groups: species [38] #&gt; name height mass hair_color skin_color eye_color birth_year sex gender #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Luke~ 172 77 blond fair blue 19 male mascu~ #&gt; 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu~ #&gt; 3 R2-D2 96 32 &lt;NA&gt; white, bl~ red 33 none mascu~ #&gt; 4 Dart~ 202 136 none white yellow 41.9 male mascu~ #&gt; 5 Leia~ 150 49 brown light brown 19 fema~ femin~ #&gt; 6 Owen~ 178 120 brown, gr~ light blue 52 male mascu~ #&gt; 7 Beru~ 165 75 brown light blue 47 fema~ femin~ #&gt; 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu~ #&gt; 9 Bigg~ 183 84 black light brown 24 male mascu~ #&gt; 10 Obi-~ 182 77 auburn, w~ fair blue-gray 57 male mascu~ #&gt; # ... with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, #&gt; # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; Notice that nothing has changed in the data, but at the top you can see the text # Groups: species [38], showing that you indeed have created a group, and that you have 38 different species in your data. The main use of group_by() is together with summarise(), which does a summary based on the groups youve created: starwars %&gt;% group_by(species) %&gt;% #create group summarise(mean_height = mean(height, na.rm = TRUE)) # calculate summary statistic #&gt; # A tibble: 38 x 2 #&gt; species mean_height #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Aleena 79 #&gt; 2 Besalisk 198 #&gt; 3 Cerean 198 #&gt; 4 Chagrian 196 #&gt; 5 Clawdite 168 #&gt; 6 Droid 131. #&gt; 7 Dug 112 #&gt; 8 Ewok 88 #&gt; 9 Geonosian 183 #&gt; 10 Gungan 209. #&gt; # ... with 28 more rows Note how again, like in data.frame, the argument name to summarise becomes the column name in your new data frame. You can use several summary functions inside summarise(), like median(), sd(), sum() and max() to name some. You can also do several summaries within a single summarise() function: starwars %&gt;% group_by(species) %&gt;% summarise(mean_height = mean(height, na.rm = TRUE), median_height = median(height, na.rm = TRUE), sd_height = sd(height, na.rm = TRUE)) #&gt; # A tibble: 38 x 4 #&gt; species mean_height median_height sd_height #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Aleena 79 79 NA #&gt; 2 Besalisk 198 198 NA #&gt; 3 Cerean 198 198 NA #&gt; 4 Chagrian 196 196 NA #&gt; 5 Clawdite 168 168 NA #&gt; 6 Droid 131. 97 49.1 #&gt; 7 Dug 112 112 NA #&gt; 8 Ewok 88 88 NA #&gt; 9 Geonosian 183 183 NA #&gt; 10 Gungan 209. 206 14.2 #&gt; # ... with 28 more rows We can even group by several variables, creating more detailed summaries: starwars %&gt;% group_by(homeworld, sex) %&gt;% summarise(mean_height = mean(height, na.rm = TRUE)) #&gt; # A tibble: 61 x 3 #&gt; # Groups: homeworld [49] #&gt; homeworld sex mean_height #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Alderaan female 150 #&gt; 2 Alderaan male 190. #&gt; 3 Aleen Minor male 79 #&gt; 4 Bespin male 175 #&gt; 5 Bestine IV male 180 #&gt; 6 Cato Neimoidia male 191 #&gt; 7 Cerea male 198 #&gt; 8 Champala male 196 #&gt; 9 Chandrila female 150 #&gt; 10 Concord Dawn male 183 #&gt; # ... with 51 more rows Now you get two groups for homeworld Alderaan, one with males and one with females. For the following homeworld groups there are only males, so you just get one group for each (giving a pretty accurate picture of the gender balance in Star Wars). 2.2.4.1 Counting how many observations we have in our groups with tally() When we have created our groups, we can also use the tally() function to count the number of observations we have in the groups: starwars %&gt;% group_by(species) %&gt;% tally() #&gt; # A tibble: 38 x 2 #&gt; species n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Aleena 1 #&gt; 2 Besalisk 1 #&gt; 3 Cerean 1 #&gt; 4 Chagrian 1 #&gt; 5 Clawdite 1 #&gt; 6 Droid 6 #&gt; 7 Dug 1 #&gt; 8 Ewok 1 #&gt; 9 Geonosian 1 #&gt; 10 Gungan 3 #&gt; # ... with 28 more rows This can be useful to get an overview of your data3 Important concept: Group_by() can be combined with different functions to give an overview of your data. group_by() %&gt;% summarise() does some calculation in each group. Example: group_by(homeworld, sex) %&gt;% summarise(mean_height = mean(height)) group_by() %&gt;% tally() counts the number of observations in the groups. Example: group_by(species) %&gt;% tally() 2.2.5 Using everything weve learned in a single pipe, and a dplyr exercise One advantage of pipes is that you can do everything you want in a single operation4. Below is an example using everything weve learned so far in a single pipe. starwars %&gt;% select(-films, -vehicles, -starships) %&gt;% filter(species == &quot;Human&quot;) %&gt;% group_by(sex) %&gt;% summarise(mean_height = mean(height, na.rm = TRUE)) #&gt; # A tibble: 2 x 2 #&gt; sex mean_height #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 female 160. #&gt; 2 male 182. Exercise: Explain to another student what happens in the code above (or write it down if youre doing this on your own). Exercise: Take the starwars data set, filter so you keep all that are below the mean height. Then, calculate the mean height of these short individuals, grouped by homeworld. Show hint You can supply the mean height to the logical statement inside filter(). Your filtering step should then look like this: filter(height &lt; mean(height, na.rm = TRUE)) starwars %&gt;% filter(height &lt; mean(height, na.rm = TRUE)) %&gt;% group_by(homeworld) %&gt;% summarise(mean_height = mean(height, na.rm = TRUE)) #&gt; # A tibble: 19 x 2 #&gt; homeworld mean_height #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Alderaan 150 #&gt; 2 Aleen Minor 79 #&gt; 3 Chandrila 150 #&gt; 4 Corellia 170 #&gt; 5 Coruscant 168. #&gt; 6 Endor 88 #&gt; 7 Iridonia 171 #&gt; 8 Malastare 112 #&gt; 9 Mirial 168 #&gt; 10 Naboo 151. #&gt; 11 Rodia 173 #&gt; 12 Sullust 160 #&gt; 13 Tatooine 153. #&gt; 14 Toydaria 137 #&gt; 15 Troiken 122 #&gt; 16 Tund 163 #&gt; 17 Vulpter 94 #&gt; 18 Zolan 168 #&gt; 19 &lt;NA&gt; 81 Remember that you only need to install a package once, but that it needs to be loaded with library() every time you want to use it. Remember that what the pipe basically does is to put the left hand side of the pipe into the function on the right hand side. Without the pipe, filtering and selecting looks like this: select(filter(starwars, height &lt; 100), name, height, birth_year) for example, you could realise that it doesnt make sense to calculate mean and standard deviation when you only have a single value, like weve done quite a bit In practice, its probably smart to make an object of your intermediary results every now and then. "],["plotting-your-data-with-ggplot2.html", "2.3 Plotting your data with ggplot2", " 2.3 Plotting your data with ggplot2 In the last chapter, we learned that R is highly versatile when it comes to plotting and visualising data. Visualistation really cannot be understated - as datasets become larger and more difficult to handle, it is imperative you learn how to effectively plot and explore your data. This obviously takes practice, but plotting and summarising data visually is a key skill for guiding further analysis - this is especially true for evolutionary genomics but is easily applicable to any number of scientific fields. As you may have gathered by now, there are lots of opinions on how to use R - whether you should use base or tidyverse approaches. We want to stress that there is nothing wrong with using base plotting, it is capable of some very impressive plots (use demo(graphics) to have a look). However ggplot2 is extremely flexible and takes quite a different approach to plotting compared to baseR. 2.3.1 The three things you need in a ggplot You need three basic elements to construct a ggplot:5 Data: this is your data set, and it has to be contained in a data frame. Variables: You need variables to plot on the x and y axes (mapping of variables) Geometry: You need some graphics in your plot: points, lines, boxplots, histograms etc. Lets now use these three elements step-by-step to build up our plot. In our example, we want to make a scatterplot (plot with points) of height vs. mass in our starwars data set. 2.3.1.1 Data First, we try supplying our data, starwars. The data is provided as an argument to the ggplot() function. ggplot(data = starwars) As you can see, this results in a completely empty plot (because, like I said, we need two more things). 2.3.1.2 Variables The variables are provided to the mapping argument of ggplot(). For reasons we wont discuss here, all variables always have to be contained within the function aes(). Lets try providing variables to our plot: ggplot(data = starwars, mapping = aes(x = height, y = mass)) Now were getting somewhere! We have axes now, but were still missing our points. Time to add the geometry. 2.3.1.3 Geometry The geometry of a ggplot arent provided to the ggplot() function as arguments. Instead, a separate function is added to the plot using +. All the functions for adding geometry start with geom_, and the one for points is called geom_point(). We add this to our plot: ggplot(data = starwars, mapping = aes(x = height, y = mass)) + geom_point() Wohoo, we now have the plot we set out to make! Theres an obvious outlier in the mass department, which well deal with later. The philosophy behind adding geometry with a + is that you build up your plot, layer by layer. We could for example add a regression line in addition to points in our plot: ggplot(data = starwars, mapping = aes(x = height, y = mass)) + geom_point() + #add points geom_smooth() #add regression line We could keep adding layers like this forever, as long as we felt we had some meaningful stuff to add.6 Notice how we can have line breaks in our code after the +, the plot still executes. Important concept: You need 3 things for a ggplot: data in a data frame (the data argument of ggplot()) variables  which columns of your data do you want to plot? (the mapping argument of ggplot(), needs to be wrapped in aes()) geometry  how do you want to represent your variables (separate functions, starting with geom_). You can add as many layers of geometry as youd like. 2.3.1.4 Interlude: filtering out the outlier Before we continue, we should investigate our outlier, and remove it from our data to better see the pattern between mass and height. Exercise: Use the dplyr tools you learned earlier to find out who the outlier is, and make a subset of the data without that individual. Then, remake the plot with your subsetted data. Show hint You know that the individual in question is really heavy. Use filter() on the mass column to find it! # find individuals with mass larger than 1000 starwars %&gt;% filter(mass &gt; 1000) %&gt;% select(name, mass) #&gt; # A tibble: 1 x 2 #&gt; name mass #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Jabba Desilijic Tiure 1358 # If youve seen Star Wars, the answer to this shouldnt be a huge surprise # Lets filter him out of the data starwars2 &lt;- starwars %&gt;% filter(mass &lt; 1000) # and plot it ggplot(data = starwars2, mapping = aes(x = height, y = mass)) + geom_point() 2.3.2 Storing ggplots in objects A very useful feature of ggplots is that they can be stored in objects just like any other data. We will test this with the starwars2 data frame we created above. sw_plot &lt;- ggplot(data = starwars2, mapping = aes(x = height, y = mass)) sw_plot We can now use this object as a base, and make different plots by adding geoms: # plot with points sw_plot + geom_point() # plot with line sw_plot + geom_line() # plot with regression line sw_plot + geom_smooth() If you plan to make several plots with the same data and variables, you should save the basic plot to an object to avoid repeating yourself. 2.3.3 Customizing your plots 2.3.3.1 General customization So far, weve been using the geom_ functions without arguments, but they actually take many of the same arguments as plot(). This means that you can use col to change color, pch to change point shape and lty to change line type: # create basic plot object sw_plot &lt;- ggplot(data = starwars2, mapping = aes(x = height, y = mass)) # add lines and points, and customize these sw_pts_ln &lt;- sw_plot + geom_line(col = &quot;steelblue&quot;, lty = 2) + geom_point(col = &quot;firebrick&quot;, pch = 3) # print plot sw_pts_ln Adding title and labels can be done by adding a separate function, labs(). labs() has, among others, the arguments x, y, title and subtitle, doing exactly what you would expect:7 sw_pts_ln + labs(x = &quot;Height (cm)&quot;, y = &quot;Mass (kg)&quot;, title = &quot;Heigt vs. mass in the Star Wars universe&quot;, subtitle = &quot;A part of the BIOS1140 ggplot tutorial&quot;) 2.3.3.2 Mapping variables to colors, shapes etc. The modifications youve learned so far are nice for making plots pretty, but the real power of using colors and other aesthetics comes when they can contain additional information about your data. Here we introduce a powerful concept in ggplot2 for doing this: You can map data to more than just your axis labels. In the following plot, the points are colored by their value in the species column, rather than all having the same color: ggplot(data = starwars2, mapping = aes(x = height, y = mass, col = species)) + geom_point() One important thing to note here is that your variable has to be within aes() in your plot. Note that variable names do not need quotes. Its easy to get confused about when to put something inside aes() and not, but the general rule is: If youre mapping color (or shape, linetype) to a variable in your data set, the col argument must be inside aes(). If youre giving everything the same color (or shape, linetype), the col argument must be outside of aes(). In this sense, mapping variables to e.g. color is no different than mapping to your x and y axes (which you would always wrap inside aes()) As indicated above, other things than color can be mapped to aesthetics: ggplot(data = starwars2, mapping = aes(x = height, y = mass, pch = sex, lty = sex)) + geom_point() + # method=lm creates LINEAR regression, se=FALSE removes the grey confidence intervals geom_smooth(method = &quot;lm&quot;, se = FALSE) If you e.g. want to group your points by sex, but you dont want that same grouping for your lines, you can use the mapping argument of your geom instead: ggplot(data = starwars2, mapping = aes(x = height, y = mass)) + geom_point(mapping = aes(col = sex)) + geom_smooth(method = &quot;lm&quot;, se = FALSE) Important concept: Variables can be mapped to aesthetics like color and point shape the same way they can be mapped to axes. Whenever you do this, you have to have your mapping within the aes() function. You can use the mapping argument of ggplot() to make your mapping global (i.e. for the entire plot), or the mapping argument of a geom to make the mapping exclusive to that geom. Exercise: Make a scatter plot (plot with points) of height vs. birth year in the Star Wars data. Color the points by species. Add a single (linear) regression line that is not colored by species. Show hint Map color within the geom_point() function in order to avoid having your regression line colored by species ggplot(data = starwars, mapping = aes(x = birth_year, y = height)) + geom_point(mapping = aes(col = species)) + geom_smooth(method = &quot;lm&quot;, se = FALSE) Tip: From now on, we will no longer explicitly write the names of the data and mapping arguments. Instead, we will go with argument order, as explained in the tutorial last week. data is the first argument of ggplot() and mapping is the second. Remember that you can always recognize the mapping argument since it always contains the aes() function. Similarly, x and y are always the first and second arguments respectively of aes(). This means that ggplot(data = starwars, mapping = aes(x = height, y = mass)) can just as well be written ggplot(starwars, aes(height, mass)) 2.3.4 Saving your plots You can save your ggplot to a file using the function ggsave(). At the very least, you need to provide a plot object and a file name (with extension). # create our plot sw_plot &lt;- ggplot(data = starwars, mapping = aes(x = height, y = mass)) + geom_point() # save it ggsave(&quot;sw_plot.png&quot;, sw_plot) There are more you could use, but these three are the ones that are strictly necessary. Like this! ggplot(data = starwars, mapping = aes(x = height, y = mass)) + geom_point() + geom_line() + geom_text(aes(label = name)) + geom_boxplot() + geom_violin() + geom_smooth() I know, I know, I did say meaningful Notice how our plot is built up layer by layer. Just to remind you, heres how the code for our plot would look without creating intermediary objects: ggplot(data = starwars2, mapping = aes(x = height, y = mass)) + geom_line(col = &quot;steelblue&quot;, lty = 2) + geom_point(col = &quot;firebrick&quot;, pch = 3) + labs(x = &quot;Height (cm)&quot;, y = &quot;Mass (kg)&quot;, title = &quot;Heigt vs. mass in the Star Wars universe&quot;, subtitle = &quot;A part of the BIOS1140 ggplot tutorial&quot;)  "],["pivot-longer.html", "2.4 Reshaping data with pivot_longer()", " 2.4 Reshaping data with pivot_longer() 2.4.1 Wide and long format Lets say you have some biological data (finally, wohoo!), and want to plot it using ggplot2. There are (at least) two ways your data can be formatted: Figure 2.1: Data in wide format (left) and long format (right) These two formats are commonly referred to as wide and long respectively. If you want to make some plot that is e.g. colored by species in this data, the data needs to be in long format, i.e. the variable you are grouping by has to be contained in a single column. Data can be converted from wide to long using the tidyverse function pivot_longer(). 2.4.2 Import example data Lets import a data set to use as our example. Download copepods.txt here. The data contains counts of different copepod taxa from outside Drøbak. Exercise: download the data and import it into R. Is this data wide or long? Show hint Use the read.table() function. The data is tabulator separated with a header. Remember to work in the correct working directory! copepods &lt;- read.table(&quot;copepods.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) Take a look at the data and how its structured: copepods #&gt; depth acartia calanus harpacticoida oithona oncaea temora #&gt; 1 0 0 3 0 2 0 0 #&gt; 2 2 1 0 0 6 1 0 #&gt; 3 4 1 0 0 7 0 1 #&gt; 4 6 27 0 1 0 0 2 #&gt; 5 8 11 0 2 6 0 3 #&gt; 6 10 17 0 3 0 0 2 #&gt; 7 12 13 0 1 0 0 1 #&gt; 8 14 7 0 13 0 0 0 #&gt; 9 16 6 0 6 0 0 1 2.4.3 Reshape the data As you hopefully figured out, this data is in so-called wide format, and we need to make it long with pivot_longer(). pivot_longer() has two important arguments called names_to and values_to. In our case names_to is the name of the new column of species, and values_to is the name of the new column where our values go. In addition, you need to provide the columns that you want to reshape. We can reshape this data like this: copepods_long &lt;- copepods %&gt;% pivot_longer(c(acartia, calanus, harpacticoida, oithona, oncaea, temora), names_to = &quot;species&quot;, values_to = &quot;count&quot;) copepods_long #&gt; # A tibble: 54 x 3 #&gt; depth species count #&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 0 acartia 0 #&gt; 2 0 calanus 3 #&gt; 3 0 harpacticoida 0 #&gt; 4 0 oithona 2 #&gt; 5 0 oncaea 0 #&gt; 6 0 temora 0 #&gt; 7 2 acartia 1 #&gt; 8 2 calanus 0 #&gt; 9 2 harpacticoida 0 #&gt; 10 2 oithona 6 #&gt; # ... with 44 more rows Note that pivot_longer() has the same way of selecting columns as select(), meaning we can use the minus sign to choose all columns except depth. The following code does the same as the one above: copepods_long &lt;- copepods %&gt;% pivot_longer(-depth, names_to = &quot;species&quot;, values_to = &quot;count&quot;) That sure is more convenient than explicitly selecting all the columns we want (in our case, anyway)! 2.4.4 Plot the data Now we can plot the data! By now, you should know enough ggplot to attempt this yourself. Exercise: Make a plot where you have depth on the x-axis and count on the y-axis, and color by species. Experiment with using some different geoms and find the most suitable for visualising your data. When youve settled on a geom, create a title and axis labels, and save your finished plot with ggsave() Show some geom ideas Try these, and see how they look for your data! geom_point() geom_jitter() (what is the difference between this and geom_point()?) geom_col() (tip: use fill aesthetic instead of col) geom_boxplot() (does this make sense?) geom_line() geom_area() (use fill for this one too) Show code and plots depthplot &lt;- ggplot(copepods_long, aes(depth, count, col = species)) depthplot + geom_point() depthplot + geom_jitter() depthplot + geom_col(aes(fill = species)) depthplot + geom_boxplot() depthplot + geom_line() depthplot + geom_area(aes(fill = species)) Im settling on geom_area() since it nicely shows both total abundance and the relationship between the taxa (plus, it looks cool). Some additional tricks I do: flip the coordinates with coord_flip() to get depth on the y-axis, and plotting -depth instead of depth to plot depth downwards. I do this because it is how depth data is usually shown in marine biology, and because I wanted to show you that there are lots of options on customising plots that you will encounter as you learn more about ggplot. copeplot &lt;- ggplot(copepods_long, aes(-depth, count)) + geom_area(aes(fill = species)) + labs(title = &quot;Number of individuals by depth&quot;, subtitle = &quot;Data from Drøbak&quot;, x = &quot;Depth (m)&quot;, y = &quot;Count&quot;) + coord_flip() copeplot "],["study-questions.html", "2.5 Study questions", " 2.5 Study questions The study questions for week 1-2 are found here. Deliver them in Canvas before the deadline as a word or pdf document. See the appendix for some important points on how the assignments should be delivered. There, you will also find an introduction to R Markdown, a good way to combine code, output and text for a report. "],["going-further-1.html", "2.6 Going further", " 2.6 Going further As normal, R has a huge range of freely available resources online that can help you learn more about data manipulation, the tidyverse, ggplot2 and scripting. Here we point you to a few below that you might be interested in. Datacamp has an free introduction to using tidyverse packages to manipulate data Hadley Wickham &amp; Garrett Grolemund have written the definitive, freely available online book on using R for data manipulation - this is the bible of the tidyverse approach and includes a section on ggplot2 There is also a Datacamp course on ggpot2 Winston Changs R Graphics Cookbook is also an excellent resource for using ggplot2 for data visualisation A detailed software carpentry guide to R scripting "]]
