sparrows_sw@n.sites
length(sparrows_sw@n.sites)
1:length(sparrows_sw@n.sites) * 25000
# set chromosome size
chr8 <- 49693984
# set window size and window jump
window_size <- 100000
window_jump <- 25000
# use seq to find the start points of each window
window_start <- seq(from = 1, to = chr8, by = window_jump)
# add the size of the window to each start point
window_stop <- window_start + window_size
# no windows start before the end of chromosome 8
sum(window_start > chr8)
# but some window stop positions do occur past the final point
sum(window_stop > chr8)
# remove windows from the start and stop vectors
window_start <- window_start[which(window_stop < chr8)]
window_stop <- window_stop[which(window_stop < chr8)]
# save as a data.frame
windows <- data.frame(start = window_start, stop = window_stop,
mid = window_start + (window_stop-window_start)/2)
windows$mid
1:length(sparrows_sw@n.sites) * 25000
1:length(sparrows_sw@n.sites) * 25000 + 25001
sparrows_sw@n.sites2
sparrows_sw@n.valid.sites
# set chromosome size
chr8 <- 49693984
# set window size and window jump
window_size <- 100000
window_jump <- 25000
# make a sliding window dataset
sparrows_sw <- sliding.window.transform(sparrows, width = window_size, jump = window_jump, type = 2)
# use seq to find the start points of each window
window_start <- seq(from = 1, to = chr8, by = window_jump)
window_start
window_stop[1]
window_start[1]
window_start[2]
window_stop[length(window_stop)]
chr8
# use seq to find the start points of each window
window_start <- seq(from = 1, to = chr8, by = window_jump)
# add the size of the window to each start point
window_stop <- window_start + window_size
window_stop[length(window_stop)]
# no windows start before the end of chromosome 8
sum(window_start > chr8)
# but some window stop positions do occur past the final point
sum(window_stop > chr8)
# no windows start before the end of chromosome 8
sum(window_start > chr8)
# but some window stop positions do occur past the final point
sum(window_stop > chr8)
which(window_stop < chr8)
window_stop < chr8
# remove windows from the start and stop vectors
window_start <- window_start[window_stop < chr8]
window_stop <- window_stop[window_stop < chr8]
chr8 - window_stop[length(window_stop)]
g <- ggplot(d, aes(Total_Fertility_Rate, Life_Expectancy_at_Birth))
g + geom_point(alpha = 0.7)
g + geom_point(alpha = 0.5)
h <- g + geom_point(aes(col = Continent, size = Population), alpha = 0.5)
h
h + facet_wrap(~Continent)
chr8 - window_stop[length(window_stop)]
# save as a data.frame
windows <- data.frame(start = window_start, stop = window_stop,
mid = window_start + (window_stop-window_start)/2)
pops[1]
length(pops)
# make population name vector
pops <- c("bactrianus", "house", "italian", "spanish", "tree")
1:length(pops)
# get column names
x <- colnames(fst)
# extract nucleotide diversity and correct for window size
nd <- sparrows_sw@nuc.diversity.within/100000
# make population name vector
pops <- c("bactrianus", "house", "italian", "spanish", "tree")
# set population names
colnames(nd) <- paste0(pops, "_pi")
# extract fst values
fst <- t(sparrows_sw@nuc.F_ST.pairwise)
# extract dxy - pairwise absolute nucleotide diversity
dxy <- get.diversity(sparrows_sw, between = T)[[2]]/100000
# calculate diversity statistics
sparrows_sw <- diversity.stats(sparrows_sw, pi = TRUE)
# calculate diversity statistics
sparrows_sw <- F_ST.stats(sparrows_sw, mode = "nucleotide")
nd <- sparrows_sw@nuc.diversity.within/100000
# make population name vector
pops <- c("bactrianus", "house", "italian", "spanish", "tree")
# set population names
colnames(nd) <- paste0(pops, "_pi")
# extract fst values
fst <- t(sparrows_sw@nuc.F_ST.pairwise)
# extract dxy - pairwise absolute nucleotide diversity
dxy <- get.diversity(sparrows_sw, between = T)[[2]]/100000
# get column names
x <- colnames(fst)
x
for(i in 1:length(pops)){
x <- sub(paste0("pop", i), pops[i], x)
}
x
# replace forward slash
x <- sub("/", "_", x)
x
# extract nucleotide diversity and correct for window size
nd <- sparrows_sw@nuc.diversity.within/100000
# make population name vector
pops <- c("bactrianus", "house", "italian", "spanish", "tree")
# set population names
colnames(nd) <- paste0(pops, "_pi")
# extract fst values
fst <- t(sparrows_sw@nuc.F_ST.pairwise)
# extract dxy - pairwise absolute nucleotide diversity
dxy <- get.diversity(sparrows_sw, between = T)[[2]]/100000
## Name the fst and dxy columns properly
# get column names
x <- colnames(fst)
# replace "pop" with the proper names of the populations
for(i in 1:length(pops)){
x <- sub(paste0("pop", i), pops[i], x)
}
# replace forward slash with underline
x <- sub("/", "_", x)
# set column names of fst and dxy
colnames(fst) <- paste0(x, "_fst")
colnames(dxy) <- paste0(x, "_dxy")
## Combine all data with the windows object we made earlier
sparrow_data <- data.frame(windows, nd, fst, dxy)
sparrow_data
## Combine all data with the windows object we made earlier
sparrow_data <- tibble(windows, nd, fst, dxy)
sparrow_data
## Combine all data with the windows object we made earlier
sparrow_data <- as_tibble(data.frame(windows, nd, fst, dxy))
sparrow_data
# select nucleotide diversity data and calculate means
sparrow_data %>% select(contains("pi")) %>% summarise_all(mean)
# gather the data
pi_g <- sparrow_data %>%
select(contains("pi")) %>%
pivot_longer(names_to = "species", values_to = "pi")
# gather the data
pi_g <- sparrow_data %>%
select(contains("pi")) %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
pi_g
# gather the data
pi_g <- sparrow_data %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
# gather the data
pi_g <- sparrow_data %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
pi_g
# gather the data
pi_g <- sparrow_data %>%
select(contains("pi")) %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
# gather the data
pi_g <- sparrow_data %>%
select(contains("pi")) %>%
pivot_longer(everything(), names_to = "species", values_to = "pi")
pi_g
sparrow_data %>%
select(contains("pi"))
# gather the data
pi_g <- sparrow_data %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
# make a boxplot
a <- ggplot(pi_g, aes(species, pi)) + geom_boxplot() + theme_light() + xlab(NULL)
# gather the data
pi_g <- sparrow_data %>%
pivot_longer(contains("pi"), names_to = "species", values_to = "pi")
# make a boxplot
a <- ggplot(pi_g, aes(species, pi)) + geom_boxplot() + theme_light() + xlab(NULL)
a
a <- ggplot(sparrow_data, aes(mid/10^6, house_spanish_fst)) + geom_line(colour = "red")
a <- a + xlab("Position (Mb)") + ylab(expression(italic(F)[ST]))
a + theme_light()
# select data of interest
hs <- sparrow_data %>% select(mid, house_pi, spanish_pi, house_spanish_fst, house_spanish_dxy)
# use gather to rearrange everything
hs_g <- gather(hs, -mid, names_to = "stat", values_to = "value")
# use gather to rearrange everything
hs_g <- pivot_longer(hs, -mid, names_to = "stat", values_to = "value")
hs_g
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + xlab("Position (Mb)")
a + theme_light()
# construct a plot with facets
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + facet_wrap(stat~., scales = "free_y")
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
# construct a plot with facets
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + facet_wrap(~stat, scales = "free_y", ncol = 1)
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
# first make a factor
x <- factor(hs_g$stat)
# then reorder the levels
x <- factor(x, levels(x)[c(3, 1, 4, 2)])
# add to data.frame
hs_g$stat <- x
# construct a plot with facets
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + facet_grid(stat~., scales = "free_y")
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
a <- a + facet_wrap(stat~., scales = "free_y")
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
a <- a + facet_wrap(stat~., scales = "free_y", ncol = 1)
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
# construct a plot with facets
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + facet_wrap(~stat, scales = "free_y", ncol = 1)
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
hs_g$stat <- fct_relevel(hs_g$stat,
c("house_spanish_fst",
"house_pi",
"spanish_pi",
"house_spanish_dxy"))
new_order <- c("house_spanish_fst", "house_pi", "spanish_pi", "house_spanish_dxy")
hs_g$stat <- fct_relevel(hs_g$stat, new_order)
hs_g$stat
# use gather to rearrange everything
hs_g <- pivot_longer(hs, -mid, names_to = "stat", values_to = "value")
new_order <- c("house_spanish_fst", "house_pi", "spanish_pi", "house_spanish_dxy")
hs_g$stat <- fct_relevel(hs_g$stat, new_order)
# construct a plot with facets
a <- ggplot(hs_g, aes(mid/10^6, value, colour = stat)) + geom_line()
a <- a + facet_wrap(~stat, scales = "free_y", ncol = 1)
a <- a + xlab("Position (Mb)")
a + theme_light() + theme(legend.position = "none")
rrate <- read_delim("./chr8_recomb.tsv", delim = "\t")
rrate
# assign recombination rate to full sparrow dataset
sparrow_data$recomb <- rrate$recomb
# construct a plot for recombination rate
a <- ggplot(sparrow_data, aes(mid/10^6, recomb)) + geom_line()
a <- a + xlab("Position (Mb)") + ylab("Recombination rate (cM/Mb)")
a + theme_light()
# subset data and gather
hr <- sparrow_data %>%
select(mid, house_spanish_fst, recomb) %>%
pivot_longer(-mid, names_to = "stat", values_to = "value")
# make a facet plot
a <- ggplot(hr, aes(mid/10^6, value)) + geom_line()
a <- a + facet_grid(stat~., scales = "free_y")
a <- a + xlab("Position (Mb)") + ylab("Recombination rate (cM/Mb)")
a + theme_light()
a <- a + facet_wrap(~stat, scales = "free_y")
a <- a + xlab("Position (Mb)") + ylab("Recombination rate (cM/Mb)")
a + theme_light()
a <- a + facet_wrap(~stat, scales = "free_y", ncol = 1)
a <- a + xlab("Position (Mb)") + ylab("Recombination rate (cM/Mb)")
a + theme_light()
# plot recombination rate and fst
a <- ggplot(sparrow_data, aes(recomb, house_spanish_fst)) + geom_point()
a <- a + xlab("Recombination rate (cM/Mb)") + ylab(expression(italic(F[ST])))
a + theme_light()
# plot recombination rate and fst
a <- ggplot(sparrow_data, aes(recomb, house_spanish_fst)) + geom_point()
a <- a + xlab("Recombination rate (cM/Mb)") + ylab(expression(italic(F[ST])))
a + theme_light()
library(ape)
library(phangorn)
library(adegenet)
library(tidyverse)
library(parallel)
# set seed to ensure the same tree is produced
set.seed(32)
# generate a tree
tree <- rtree(n = 4, tip.label = c("a", "b", "c", "d"))
tree
class(tree)
str(tree)
objects(tree)
tree$edge
tree$edge.length
plot(tree)
# Chunk 1: setup
source("setup.R")
# Chunk 2: html-doc
#include html script
# Chunk 3
library(ape)
library(phangorn)
library(adegenet)
library(tidyverse)
# Chunk 5
# set seed to ensure the same tree is produced
set.seed(32)
# generate a tree
tree <- rtree(n = 4, tip.label = c("a", "b", "c", "d"))
# Chunk 6
tree
# Chunk 8
plot(tree)
# Chunk 9
# set seed to ensure the same tree is produced
set.seed(32)
# generate a tree
tree <- rtree(n = 5, tip.label = c("a", "b", "c", "d", "e"))
# Chunk 10
# plot tree and suppress branch lengths
plot(tree, use.edge.length = FALSE)
# Chunk 11
# plot cladogram
plot(tree, type = "cladogram", use.edge.length = FALSE)
# Chunk 12
# plot unrooted
plot(tree, type = "unrooted", use.edge.length = FALSE)
# Chunk 13
# plot fan/radial treee
plot(tree, type = "fan", use.edge.length = FALSE)
# Chunk 14
# plot fan/radial treee
plot(tree, use.edge.length = FALSE, edge.width = 2, edge.color = "red")
# Chunk 15
# set seed (to ensure the same tree is drawn for all)
set.seed(32)
# make a new tree with 5 tips - one is root
tree <- rtree(n = 5, tip.label = c("a", "b", "c", "d", "e"))
# plot the tree
plot(tree)
# Chunk 16
# drop a tip
prune_tree <- drop.tip(tree, "d")
plot(prune_tree)
# Chunk 17
# rotate tree
prune_tree1 <- rotate(prune_tree, c("b", "a"))
# plot newly rotate tree
plot(prune_tree1)
# Chunk 18
# show nodes on tree
plot(prune_tree1)
nodelabels()
# Chunk 19
# rotate tree specifying node
prune_tree2 <- rotate(prune_tree1, 7)
# plot newly rotate tree
plot(prune_tree2)
# Chunk 20
# set seed
set.seed(32)
# make a random tree of three taxa
tree <- rtree(n = 3, tip.label = c("a", "b", "c"))
# plot the tree
par(mfrow = c(3, 1))
plot(tree, use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
plot(rotate(tree, 4), use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
plot(rotate(tree, 5), use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
plot(tree, use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
plot(rotate(tree, 4), use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
plot(rotate(tree, 5), use.edge.length = FALSE, cex = 1.5, no.margin = TRUE)
par(mfrow = c(1, 1))
# get bird order data
data("bird.orders")
plot(bird.orders, no.margin = TRUE)
segments(38, 1, 38, 5, lwd = 2)
text(39, 3, "Proaves", srt = 270)
segments(38, 6, 38, 23, lwd = 2)
text(39, 14.5, "Neoaves", srt = 270)
# Parrots and Passerines?
is.monophyletic(bird.orders, c("Passeriformes", "Psittaciformes"))
# hummingbirds and swifts?
is.monophyletic(bird.orders, c("Trochiliformes", "Apodiformes"))
?extract clade
?extract.clade
readLines("Exercise8.Rmd", n = 3)
readLines("Exercise8.Rmd", n = 10)
readLines("Exercise8.Rmd") %>% if(str_detect(., "^#")) print("Hey")
readLines("Exercise8.Rmd") %>% ifelse(str_detect(., "^#"), "hey", "nay")
plot(neoaves)
plot(bird.orders)
nodelabels()
plot(bird.orders, no.margin = TRUE)
segments(38, 1, 38, 5, lwd = 2)
text(39, 3, "Proaves", srt = 270)
segments(38, 6, 38, 23, lwd = 2)
text(39, 14.5, "Neoaves", srt = 270)
nodelabels()
plot(bird.orders, no.margin = TRUE)
segments(38, 1, 38, 5, lwd = 2)
text(39, 3, "Proaves", srt = 270)
segments(38, 6, 38, 23, lwd = 2)
text(39, 14.5, "Neoaves", srt = 270)
plot(bird.orders, no.margin = TRUE)
segments(38, 1, 38, 5, lwd = 2)
text(39, 3, "Proaves", srt = 270)
segments(38, 6, 38, 23, lwd = 2)
text(39, 14.5, "Neoaves", srt = 270)
nodelabels()
# extract clade
neoaves <- extract.clade(bird.orders, 29)
# plot
plot(neoaves)
# get phangorn primates data
fdir <- system.file("extdata/trees", package = "phangorn")
primates <- read.dna(file.path(fdir, "primates.dna"), format = "interleaved")
primates
?primates
??primates
??primates.data
fdir
# subset data to get hominidae
hominidae <- primates[11:14, ]
# convert data
hominidae <- as.phyDat(hominidae)
hominidae
# perform model selection
hominidae_mt <- modelTest(hominidae, model = c("JC", "F81"), G = FALSE, I = FALSE)
hominidae_mt
?dist.ml
# first generate a distance matrix
hominidae_mt <- dist.ml(hominidae, model = "F81")
hominidae_mt
# first generate a distance matrix
hominidae_dist <- dist.ml(hominidae, model = "F81")
# upgma tree
hom_upgma <- upgma(hominidae_dist)
# NJ tree
hom_nj <- NJ(hominidae_dist)
# plot them both
par(mfrow = c(2, 1))
plot(hom_upgma, no.margin = TRUE)
plot(hom_nj, no.margin = TRUE)
# check whether the tree is rooted
is.rooted(hom_nj)
is.rooted(hom_upgma)
# plot nj unrooted
plot(hom_nj, type = "unrooted")
# plot them both
par(mfrow = c(2, 1))
plot(hom_upgma, no.margin = TRUE)
plot(hom_nj, no.margin = TRUE)
par(mfrow = c(1,1))
# plot nj unrooted
plot(hom_nj, type = "unrooted")
# plot nj rooted
hom_nj_r <- root(hom_nj, "Orang")
plot(hom_nj_r)
# calculate parsimony
parsimony(hom_upgma, hominidae)
parsimony(hom_nj, hominidae)
# generate a tree
tree <- rtree(n = 4, tip.label = c("a", "b", "c", "d"))
tree
# plot fan/radial treee
plot(tree, use.edge.length = FALSE, edge.width = 2, edge.color = "red")
# read in the dog data
dogs <- read.PLINK(file = "./village_subsample.raw",
map.file = "./village_subsample.map", parallel = FALSE,
chunkSize = 2000)
# perform pca on dogs
dogs_pca <- glPca(dogs, parallel = T, nf = 20)
# look at pca object
objects(dogs_pca)
dogs_pca$eig
eig <- dogs_pca$eig
# calculate percentage of variance explained
eig <- (eig/sum(eig))*100
eig
# create an id vector
id <- row.names(dogs_pca$scores)
id
# get the pc scores - only the first two for now
pc <- dogs_pca$scores[, 1:2]
pc
# read in village dog data
village_data <- read_delim("./village_dogs.tsv", delim = "\t")
village_data
# join pca and village dog data
village_pca <- inner_join(village_data, my_pca, by = "id")
# create an id vector
id <- row.names(dogs_pca$scores)
# get the pc scores - only the first two for now
pc <- dogs_pca$scores[, 1:2]
# make a tibble
my_pca <- as.tibble(data.frame(id, pc))
dogs_pca$scores
dogs_pca$scores %>% rownames_to_column("id")
dogs_pca$scores %>% rownames_to_column("id")
as.data.frame(dogs_pca$scores) %>% rownames_to_column("id")
bookdown::book_skeleton(getwd())
bookdown::bookdown_skeleton(getwd())
??bookdown_skeleton
bookdown:::bookdown_skeleton(getwd())
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
source("setup.R")
library(tidyverse)
#is code here folded?
plot(1:10, rnorm(10))
bookdown::preview_chapter("index.Rmd")
bookdown::preview_chapter("index.Rmd")
bookdown::preview_chapter("index.Rmd")
bookdown::preview_chapter("index.Rmd")
bookdown::preview_chapter("index.Rmd")
